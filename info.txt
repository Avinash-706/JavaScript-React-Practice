1. WHAT IS A CDN?
   A CDN (Content Delivery Network) is a network of distributed servers 
   that deliver web content (like scripts, stylesheets, images) to users 
   from the server closest to them. 
   Purpose: Faster load times and better performance for global users.


2. WHAT IS 'crossorigin' IN A CDN LINK?
   The 'crossorigin' attribute is used when loading resources (like React from a CDN) 
   that may come from a different origin (domain).
   It tells the browser how to handle CORS (Cross-Origin Resource Sharing).
   It ensures that certain requests (like fetching source maps or modules) 
   are allowed and won't be blocked by security restrictions.


3. Syntax: const element = React.createElement(type, props, children)
                            ↓
   The {} is where we pass the 'props' (attributes).
   Example: React.createElement("h1", { className: "title" }, "Hello World");
   So inside {} we can define all the HTML attributes for that element.


   const parent = React.createElement("div", {id : "parent"}, "React.createElement("div", {id : "child"}, "Hello World"), Hello World");


4. WHAT DOES 'npm' STAND FOR?
   'npm' is commonly referred to as 'Node Package Manager'.
   BUT — officially, 'npm' doesn’t stand for anything now.
   Originally, it stood for 'Node Package Manager' because it manages packages for Node.js,
   but the maintainers say it's just 'npm' — not an acronym anymore.


5. WHAT DOES 'npx create-react-app' DO?
   'npx' is a tool that runs Node packages without needing to install them globally.
   'create-react-app' is a CLI tool (bundler setup) that:
     - Sets up a new React project
     - Configures Webpack and Babel behind the scenes
     - Gives you a working React app with zero config

   Other modern BUNDLERS are:
     - Vite (faster and lightweight)
     - Parcel
     - Snowpack
     - Webpack

    Babel - NOT a module bundler.
    It is a JavaScript compiler, primarily used for transforming modern JavaScript code
    into a format that is compatible with older browsers and environments. While it can
    be used alongside module bundlers like Webpack or Parcel, its core function is to
    transpile code, not to bundle it. 

    So, 'npx create-react-app' is NOT itself the BUNDLER —
    it sets up a project with Webpack and Babel configured for you.


6. Syntax: npm install -D parcel
 The '-D' flag is short for '--save-dev'.

 It means you are installing a **development dependency**.
 These packages are needed only during development (like bundlers, linters, or testing tools)
 and are NOT included in the final production build.

 So, there are 2 main types of dependencies:
   1. Dependencies (Normal)
       - Installed with: npm install <package>
       - Listed under: "dependencies" in package.json
       - Needed in production (e.g., React, Express)

   2. Dev Dependencies (Development)
       - Installed with: npm install -D <package> OR npm install --save-dev <package>
       - Listed under: "devDependencies" in package.json
       - Used only during development (e.g., Parcel, Webpack, Babel, ESLint)


7. CARET ^ VS TILDE ~
   - Caret ( ^ ) allows updates that do not change the first non-zero version number.
     Example: ^1.2.3 → can install versions 1.x.x but not 2.0.0
   - Tilde ( ~ ) allows updates only to the last digit (PATCH version).
     Example: ~1.2.3 → can install versions 1.2.x but not 1.3.0
   USE:
     - ^ is more flexible (used commonly for libraries to get bug fixes & minor features)
     - ~ is more strict (used when you want tighter control over updates)


8. PACKAGE.JSON VS PACKAGE-LOCK.JSON
   - package.json:
       * Contains project metadata (name, version, scripts, dependencies)
       * Stores APPROXIMATE versions (e.g., ^1.2.3 or ~1.2.3)
       * Does not update automatically
   - package-lock.json:
       * Records the EXACT versions installed
       * Ensures consistency across different environments
       * Updates automatically when dependencies change
   PURPOSE:
       - Both files together ensure reproducible builds while allowing flexibility in upgrades.


9. TRANSITIVE DEPENDENCIES
   - These are dependencies required by your dependencies.
   - Example: Parcel internally depends on Babel (you install Parcel, Babel comes indirectly).
   - npm automatically installs these transitive dependencies for you.


10. WHY NODE_MODULES IS IN .GITIGNORE
   - node_modules contains all installed packages (can be very large in size)
   - If package.json and package-lock.json exist, node_modules can always be regenerated using `npm install`
   - Reason:
       * Saves storage and reduces repository size
       * Avoids platform-specific conflicts
       * Keeps GitHub repo clean and lightweight


11. WHAT IS PARCEL?
   Parcel is a ZERO-CONFIGURATION web application bundler.
   It provides modern build features without requiring manual setup.

   FEATURES:
     - DEV BUILD:
         * Fast builds optimized for development
         * Auto-rebuild on file changes
     - LOCAL SERVER:
         * Runs a local development server with live preview
     - HMR (HOT MODULE REPLACEMENT):
         * Updates code in the browser without a full page reload
     - FILE WATCHING ALGORITHM:
         * Written in C++ for high performance
     - FASTER BUILDS:
         * Efficient incremental rebuilds
     - CACHING:
         * Uses .parcel-cache to store previous builds and speed up future builds
     - IMAGE OPTIMIZATION:
         * Automatically compresses and optimizes images
     - MINIFICATION:
         * Removes unnecessary characters/spaces in production
     - BUNDLING:
         * Combines multiple files (JS, CSS, images) into fewer optimized files
     - COMPRESSION:
         * Compresses final output for smaller size
     - CONSISTENT HASHING:
         * Ensures cache-busting by generating unique hashes per build
     - CODE SPLITTING:
         * Breaks large code into smaller chunks (loaded only when needed)
     - DIFFERENTIAL BUNDLING:
         * Creates separate bundles for modern and older browsers
     - DIAGNOSTIC:
         * Detailed error messages with solutions
     - ERROR HANDLING:
         * Clear error overlay in browser + console logs
     - HTTPS:
         * Supports serving over HTTPS locally
     - SUPPORT FOR OLDER BROWSERS:
         * Automatically transpiles code using Babel and polyfills
     - TREE SHAKING:
         * Removes unused/dead code from the final bundle
     - SEPARATE DEV AND PROD BUNDLES:
         * Development bundle = fast, uncompressed, easy debugging
         * Production bundle = optimized, compressed, ready for deployment


12. PARCEL AND "main" FIELD IN PACKAGE.JSON
   - By default, package.json may contain a "main" entry (e.g., "index.html").
   - To start Parcel correctly, we REMOVE the "main" field.
   - Why?
       * Parcel needs to directly use the HTML entry point (index.html)
       * If "main" is defined, it may conflict with Parcel’s entry resolution.


13. WHAT IS "DIST" FOLDER AND ".PARCEL-CACHE"?
   - DIST FOLDER:
       * Short for "distribution"
       * Contains the final output (bundled, optimized production files)
       * Used for deployment
   - .PARCEL-CACHE:
       * Hidden folder created by Parcel
       * Stores cache of previous builds
       * Greatly improves rebuild performance
       * Can be safely deleted (Parcel will regenerate it)


14. WHAT DOES "npx parcel build index.html" DO?
   - Runs a PRODUCTION BUILD of your project
   - Process:
       * Bundles all files (JS, CSS, images, etc.)
       * Minifies and compresses them
       * Outputs a production-ready build
   - RESULT:
       * Final dist/ folder typically contains just 3 main files:
           1. index.html
           2. single .css file
           3. single .js file
       * Ensures optimized, fast-loading website for deployment


15. WHAT IS "BROWSERSLIST"?
   - Browserslist is a tool to specify which browsers your project should support.
   - Example config in package.json:
       "browserslist": [
         "last 2 versions",
         "> 1%",
         "not dead"
       ]
   - PURPOSE:
       * Helps tools like Babel, Autoprefixer, and Parcel decide how to transpile/optimize code
       * Ensures compatibility with specified browsers (NOTE : You Can Also Be Country Specific)
   - REALTIME CHECK:
       * You can test your config at: https://browserslist.dev
       * Example "last 2 versions" → means last 2 versions of all major browsers


16. JSX VS REACT (FULL WORKING)

   - JSX and React are DIFFERENT:
       * JSX → JavaScript XML, a syntax extension that looks like HTML
       * React → JavaScript library for building user interfaces
       * React can work WITHOUT JSX (using React.createElement directly)

   - JSX IS NOT HTML:
       * Looks like HTML but is actually JavaScript
       * Browser does not understand JSX directly
       * Needs to be transpiled into pure JavaScript (ES6)

   - COMPLETE WORKING FLOW:
       STEP 1: JSX Code (Developer writes)
         const heading = <h1 id="title">Hello World</h1>;

       STEP 2: Babel Transpiles JSX → React.createElement()
         const heading = React.createElement(
           "h1",                        // type of element
           { id: "title" },             // props (attributes)
           "Hello World"                // children
         );

       STEP 3: React.createElement RETURNS a ReactElement (JS OBJECT)
         const heading = {
           type: "h1",
           props: {
             id: "title",
             children: "Hello World"
           }
         };

       STEP 4: ReactDOM.render() converts ReactElement → Actual HTML DOM
         <h1 id="title">Hello World</h1>

   - SUMMARY PIPELINE:
       JSX → Babel → React.createElement() → ReactElement (JS Object) → ReactDOM → HTML DOM

   - IMPORTANT POINTS:
       * JSX is just syntactic sugar
       * Parcel integrates Babel, but Babel is the one doing the JSX transpilation
       * React works with plain JS objects internally (Virtual DOM)
       * ReactDOM renders those objects into real DOM nodes


17. WHAT IS BABEL?

   - Babel is a JAVASCRIPT COMPILER.
   - PURPOSE:
       * Converts modern JS (ES6+) & JSX into older JS that browsers understand
       * Ensures cross-browser compatibility
   - USE WITH REACT:
       * Transpiles JSX → React.createElement calls
       * Adds polyfills for features not supported in older browsers
   - IMPORTANT POINTS:
       * Babel is NOT created by Facebook (React is by Facebook)
       * Babel is an INDEPENDENT open-source project
   - BABEL PLUGINS & CUSTOMIZATION:
       * JSX transpilation
       * TypeScript support
       * Polyfilling async/await & other modern features
       * Removing console.log in production
       * Tree-shaking & dead code elimination (via bundlers)


18. DIFFERENCES BETWEEN HTML AND JSX

   JSX is SIMILAR to HTML but not exactly the same.
   Since JSX is JavaScript under the hood, property names differ.

   COMMON DIFFERENCES:
     HTML                           JSX
     ------------------             -------------------
     class = ""                     className = ""
     for = ""                       htmlFor = ""
     tabindex = ""                  tabIndex = ""
     onclick = ""                   onClick = {}
     style="color:red"              style={{ color: "red" }}
     maxlength = "5"                maxLength = {5}

   REASONS:
     - JSX uses camelCase for DOM properties
     - Because they are JavaScript object keys, not HTML attributes
     - Event handlers must be passed as functions (e.g., onClick={handler})


19. MULTI-LINE JSX CODE

   - If JSX spans multiple lines, wrap inside parentheses ( ).
   - Example:
       const element = (
         <div>
           <h1>Hello</h1>
           <p>This is multi-line JSX</p>
         </div>
       );

   - Without parentheses, JavaScript may throw syntax errors.
   - GOOD PRACTICES:
       * Always indent nested JSX properly
       * Use ( ) for better readability and to avoid parsing errors